import { ComponentFixture, TestBed } from '@angular/core/testing';
import { of, throwError } from 'rxjs';
import { AuditTrailComponent } from './audit-trail.component';
import { AuthentificationService } from '../authentication/authentication-service';
import { DatasetInfoservice } from './service';
import { UploadService } from '/servicesunt';

describe('AuditTrailComponent', () => {
  let component: AuditTrailComponent;
  let fixture: ComponentFixture<AuditTrailComponent>;
  let mockUploadService;
  let mockDatasetInfoservice;
  let mockAuthentificationService;

  beforeEach(() => {
    mockUploadService = jasmine.createSpyObj('UploadService', ['getAuditTrail', 'mapHttpResponseToAuditDataSet']);
    mockDatasetInfoservice = jasmine.createSpyObj('DatasetInfoservice', ['currentReferentialId', 'updateDatasetVersions', 'updateUserName', 'updateValidateDate']);
    mockAuthentificationService = jasmine.createSpyObj('AuthentificationService', ['fetchUserinfo', 'hasUserPermission']);

    TestBed.configureTestingModule({
      declarations: [AuditTrailComponent],
      providers: [
        { provide: UploadService, useValue: mockUploadService },
        { provide: DatasetInfoservice, useValue: mockDatasetInfoservice },
        { provide: AuthentificationService, useValue: mockAuthentificationService }
      ]
    }).compileComponents();

    fixture = TestBed.createComponent(AuditTrailComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should initialize correctly', () => {
    mockDatasetInfoservice.currentReferentialId = of('dataset-id');
    component.ngOnInit();
    expect(component.showSpinner).toBe(true);
    expect(component.selectedDataset).toBe('dataset-id');
  });

  it('should fetch user info and call getAuditTrailData if user has permission', () => {
    mockDatasetInfoservice.currentReferentialId = of('dataset-id');
    mockAuthentificationService.fetchUserinfo.and.returnValue(of({
      name: 'John Doe',
      sub: '123456',
      is_sg_group_user: true,
      origin_network: 'network',
      user_authorization: 'admin'
    }));
    mockAuthentificationService.hasUserPermission.and.returnValue(true);

    component.ngOnInit();
    expect(component.userInfo).toBeDefined();
    expect(component.authentificationService.hasUserPermission).toHaveBeenCalledWith('admin');
    expect(component.getAuditTrailData).toHaveBeenCalled();
  });

  it('should not fetch audit trail data if user does not have permission', () => {
    mockDatasetInfoservice.currentReferentialId = of('dataset-id');
    mockAuthentificationService.fetchUserinfo.and.returnValue(of({
      name: 'John Doe',
      sub: '123456',
      is_sg_group_user: false,
      origin_network: 'network',
      user_authorization: 'user'
    }));
    mockAuthentificationService.hasUserPermission.and.returnValue(false);

    component.ngOnInit();
    expect(component.getAuditTrailData).not.toHaveBeenCalled();
    expect(component.showSpinner).toBe(false);
  });

  it('should handle error while fetching user info', () => {
    mockDatasetInfoservice.currentReferentialId = of('dataset-id');
    mockAuthentificationService.fetchUserinfo.and.returnValue(throwError('Error'));

    component.ngOnInit();
    expect(component.showSpinner).toBe(false);
  });

  it('should handle audit trail data fetch success', () => {
    mockUploadService.getAuditTrail.and.returnValue(of([{ version: 'v1', date: '2024-07-16', author: 'Jane Doe', status: 'Active' }]));
    mockUploadService.mapHttpResponseToAuditDataSet.and.returnValue([{ version: 'v1', date: '2024-07-16', author: 'Jane Doe', status: 'Active' }]);

    component.selectedDataset = 'dataset-id';
    component.getAuditTrailData();

    expect(component.auditTrailData.length).toBe(1);
    expect(component.version.length).toBe(1);
    expect(mockDatasetInfoservice.updateDatasetVersions).toHaveBeenCalledWith(['v1']);
  });

  it('should handle error while fetching audit trail data', () => {
    mockUploadService.getAuditTrail.and.returnValue(throwError('Error'));

    component.selectedDataset = 'dataset-id';
    component.getAuditTrailData();
    expect(component.showSpinner).toBe(false);
  });
});
