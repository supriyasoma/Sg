import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { RestService } from './rest.service';
import { HttpClient } from '@angular/common/http';
import { AppEnvironment } from 'path-to-app-environment';
import { Router } from '@angular/router';
import { FormGroup } from '@angular/forms';
import { of, throwError } from 'rxjs';

describe('RestService', () => {
  let service: RestService;
  let httpMock: HttpTestingController;
  let mockRouter: Router;
  let mockAppEnv: AppEnvironment;

  beforeEach(() => {
    // Mock environment and router
    mockAppEnv = {
      serviceBaseUrl: 'http://localhost:3000',
      sgwtConnect: {
        isAuthorized: jasmine.createSpy().and.returnValue(true),
        getAuthorizationHeader: jasmine.createSpy().and.returnValue('Bearer test-token')
      }
    } as any;

    mockRouter = jasmine.createSpyObj('Router', ['navigate']);

    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [
        RestService,
        { provide: Router, useValue: mockRouter },
        { provide: AppEnvironment, useValue: mockAppEnv }
      ]
    });

    service = TestBed.inject(RestService);
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should make a POST request when authorized', () => {
    const formGroup: FormGroup = new FormGroup({});
    const mockResponse = { success: true };
    const serviceName = 'user';

    service.create(formGroup, serviceName).subscribe(response => {
      expect(response).toEqual(mockResponse);
    });

    const req = httpMock.expectOne('http://localhost:3000/apiRest/user/create/');
    expect(req.request.method).toBe('POST');
    req.flush(mockResponse);
  });

  it('should log error if not authorized', () => {
    mockAppEnv.sgwtConnect.isAuthorized.and.returnValue(false);
    const formGroup: FormGroup = new FormGroup({});
    const serviceName = 'user';

    spyOn(console, 'error');  // Spy on the console error to verify the log

    service.create(formGroup, serviceName).subscribe(() => {
      expect(console.error).toHaveBeenCalledWith('SG_CONNECT_FAILED');
    });

    httpMock.verify();
  });

  it('should catch an error and log it', () => {
    const formGroup: FormGroup = new FormGroup({});
    const serviceName = 'user';

    const mockError = { status: 500, statusText: 'Internal Server Error' };
    spyOn(service, 'redirectError');  // Spy on the redirectError method

    service.create(formGroup, serviceName).subscribe({
      next: () => fail('Expected an error, not a success'),
      error: (err) => {
        expect(err.status).toBe(500);
        expect(service.redirectError).toHaveBeenCalledWith(500);
      }
    });

    const req = httpMock.expectOne('http://localhost:3000/apiRest/user/create/');
    req.flush(null, mockError);
  });

  it('should include the correct headers in the request', () => {
    const formGroup: FormGroup = new FormGroup({});
    const serviceName = 'user';

    const mockResponse = { success: true };
    const expectedHeaders = {
      'Content-Type': 'application/json',
      'X-AUTH-TOKEN': 'userInfo',  // Ensure this value is set correctly
      'Authorization': 'Bearer test-token'
    };

    service.create(formGroup, serviceName).subscribe(response => {
      expect(response).toEqual(mockResponse);
    });

    const req = httpMock.expectOne('http://localhost:3000/apiRest/user/create/');
    expect(req.request.headers.has('Content-Type')).toBeTrue();
    expect(req.request.headers.get('Authorization')).toBe(expectedHeaders['Authorization']);
    req.flush(mockResponse);
  });

  it('should redirect to error page for 401 error', () => {
    const formGroup: FormGroup = new FormGroup({});
    const serviceName = 'user';
    const mockError = { status: 401, statusText: 'Unauthorized' };

    service.create(formGroup, serviceName).subscribe({
      next: () => fail('Expected an error, not a success'),
      error: () => {
        expect(mockRouter.navigate).toHaveBeenCalledWith(['/unauthorized']);
      }
    });

    const req = httpMock.expectOne('http://localhost:3000/apiRest/user/create/');
    req.flush(null, mockError);
  });
});
