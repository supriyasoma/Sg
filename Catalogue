    it('should generate CSV file definition with header using service', () => {
      const mockGridApi = jasmine.createSpyObj('GridApi', ['getRowNode', 'forEachNode']);
      const mockRowNode = { data: { id: 1, name: 'Alice', age: 30, checkResult: 'Pass' } };
      const mockData = [
        { data: { id: 1, name: 'Alice', age: 30, checkResult: 'Pass' } },
        { data: { id: 2, name: 'Bob', age: 25, checkResult: 'Fail' } }
      ];

      mockGridApi.getRowNode.and.returnValue(mockRowNode);
      mockGridApi.forEachNode.and.callFake((callback: (node: any) => void) => {
        mockData.forEach(callback);
      });

      const csvFileDefinition = service.getCSVFileDefinitionFromGridDataWithHeader('test.csv', mockGridApi as unknown as GridApi);

      expect(mockGridApi.getRowNode).toHaveBeenCalledWith('0');
      expect(mockGridApi.forEachNode).toHaveBeenCalled();
      expect(csvFileDefinition.fileName).toBe('test.csv');
      expect(csvFileDefinition.contents[0]).toBe('Id,Name,Age');
      expect(csvFileDefinition.contents[1]).toBe('1,Alice,30');
      expect(csvFileDefinition.contents[2]).toBe('2,Bob,25');
    });

    it('should generate CSV file definition without header using service', () => {
      const mockGridApi = jasmine.createSpyObj('GridApi', ['forEachNode']);
      const mockData = [
        { data: { id: 1, name: 'Alice', age: 30, checkResult: 'Pass' } },
        { data: { id: 2, name: 'Bob', age: 25, checkResult: 'Fail' } }
      ];

      mockGridApi.forEachNode.and.callFake((callback: (node: any) => void) => {
        mockData.forEach(callback);
      });

      const csvFileDefinition = service.getCSVFileDefinitionFromGridData('test.csv', mockGridApi as unknown as GridApi);

      expect(mockGridApi.forEachNode).toHaveBeenCalled();
      expect(csvFileDefinition.fileName).toBe('test.csv');
      expect(csvFileDefinition.contents[0]).toBe('1,Alice,30,Pass');
      expect(csvFileDefinition.contents[1]).toBe('2,Bob,25,Fail');
    });
