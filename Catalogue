def largest_sum_cycle(edges):
    n = len(edges)
    max_sum = -1
    visited = [False] * n
    in_stack = [False] * n
    
    def dfs(node, path_sum, path):
        nonlocal max_sum
        visited[node] = True
        in_stack[node] = True
        
        cycle_sum = 0
        neighbor = edges[node]
        
        if neighbor != -1:
            if not visited[neighbor]:
                cycle_sum = dfs(neighbor, path_sum + neighbor, path + [neighbor])
            elif in_stack[neighbor]:
                # Found a cycle
                cycle_start = path.index(neighbor)
                cycle_sum = sum(path[cycle_start:]) + neighbor
                max_sum = max(max_sum, cycle_sum)
        
        in_stack[node] = False
        return cycle_sum
    
    for i in range(n):
        if not visited[i]:
            dfs(i, i, [i])
    
    return max_sum

def helper_function():
    # Default input
    input_data = """
23
4 4 1 4 13 8 8 8 0 8 14 9 15 11 -1 10 15 22 22 22 22 22 21
    """
    
    data = input_data.split()
    
    n = int(data[0])  # Number of cells
    edges = list(map(int, data[1:n+1]))
    
    result = largest_sum_cycle(edges)
    print(result)

if __name__ == "__main__":
    helper_function()
