it('should set dataset content and update dataset on successful save as draft', () => {
    // Arrange
    const mockGridApi = { forEachNode: (callback: Function) => callback({ data: 'mockData' }) };
    const mockResponse = new HttpResponse({ body: { /* mock response data */ } });
    const mockDataSet = {};

    mockUploadService.getRowDataFromGrid.and.returnValue(['mockData']);
    mockUploadService.setDatasetContent.and.returnValue(of(mockResponse));
    mockUploadService.mapHttpResponseToDataSet.and.returnValue(mockDataSet);

    component.gridApi = mockGridApi; // Set the mock gridApi
    component.referentialId = 'mockId'; // Set a mock referentialId

    // Act
    component.SaveAsDraft();

    // Assert
    expect(component.showSpinner).toBe(true);
    expect(mockUploadService.getRowDataFromGrid).toHaveBeenCalledWith(mockGridApi);
    expect(mockUploadService.setDatasetContent).toHaveBeenCalledWith('mockId', jasmine.any(Object));
    expect(mockUploadService.mapHttpResponseToDataSet).toHaveBeenCalledWith(mockResponse);
    expect(component.datasetContent).toBe(mockDataSet);
    expect(component.alertValue).toBe(alertMessagesValues.draftSave.success);
    expect(component.showSpinner).toBe(false);
  });

  it('should handle errors correctly in save as draft', () => {
    // Arrange
    const mockError = new Error('Mock error');
    mockUploadService.setDatasetContent.and.returnValue(throwError(mockError));

    component.gridApi = { forEachNode: (callback: Function) => callback({ data: 'mockData' }) };
    component.referentialId = 'mockId';

    // Act
    component.SaveAsDraft();

    // Assert
    expect(component.showSpinner).toBe(true);
    expect(mockUploadService.getRowDataFromGrid).toHaveBeenCalled();
    expect(mockUploadService.setDatasetContent).toHaveBeenCalledWith('mockId', jasmine.any(Object));
    expect(component.alertValue.message).toContain('Mock error');
    expect(component.showSpinner).toBe(false);
  });
