describe('onInputBoxChanged', () => {
  let mockInstance: jasmine.SpyObj<any>;

  beforeEach(() => {
    // Create a new spy object for each test
    mockInstance = jasmine.createSpyObj('parentFilterInstance', ['onFloatingFilterChanged']);
    component.params = {
      parentFilterInstance: (callback: (instance: any) => void) => callback(mockInstance),
    } as any; // Casting as `any` to mock the type
  });

  it('should call onFloatingFilterChanged with null values if showErrorsOnly is true', () => {
    component.showErrorsOnly = true;

    component.onInputBoxChanged();

    expect(mockInstance.onFloatingFilterChanged).toHaveBeenCalledWith(null, null);
  });

  it('should call onFloatingFilterChanged with "contains" and showErrorsOnly values if showErrorsOnly is false', () => {
    component.showErrorsOnly = false;

    component.onInputBoxChanged();

    expect(mockInstance.onFloatingFilterChanged).toHaveBeenCalledWith('contains', false);
  });
});
