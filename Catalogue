import { CheckResultFilterComponent } from 'path-to-your-component';
import { CheckResultRenderer } from 'path-to-your-renderer';
import { referentials } from 'path-to-your-referentials';

// Mocking functions and components if necessary
function mockCheckResultFilterComponent() { /* mock implementation */ }
function mockCheckResultRenderer() { /* mock implementation */ }

describe('Referentials Configuration', () => {

  it('should have the correct configuration for "business_area"', () => {
    const businessArea = referentials.referentialsList.find(r => r.id === 'business_area');
    expect(businessArea).toBeDefined();
    expect(businessArea.name).toBe('Business Area');
  });

  it('should have the correct column definitions', () => {
    const businessAreaColDef = referentials.referentialsColDef.find(r => r.id === 'business_area').colDef;
    expect(businessAreaColDef).toBeDefined();
    expect(businessAreaColDef.length).toBe(3);

    const checkboxColumn = businessAreaColDef[0];
    expect(checkboxColumn.field).toBe('checkboxBtn');
    expect(checkboxColumn.checkboxSelection).toBe(true);
    expect(checkboxColumn.headerCheckboxSelection).toBe(true);

    const sourceApplicationCodeColumn = businessAreaColDef[1];
    expect(sourceApplicationCodeColumn.field).toBe('sourceApplicationCode');
    expect(sourceApplicationCodeColumn.headerName).toBe('SourceApplicationCode');
    expect(sourceApplicationCodeColumn.floatingFilter).toBe(true);
    expect(sourceApplicationCodeColumn.filter).toBe('agTextColumnFilter');
    expect(sourceApplicationCodeColumn.editable).toBe(false);
    expect(sourceApplicationCodeColumn.resizable).toBe(true);
    expect(sourceApplicationCodeColumn.sortable).toBe(true);

    const checkResultColumn = businessAreaColDef[2];
    expect(checkResultColumn.field).toBe('checkResult');
    expect(checkResultColumn.headerName).toBe('CheckResult');
    expect(checkResultColumn.floatingFilter).toBe(true);
    expect(checkResultColumn.filter).toBe('agTextColumnFilter');
    expect(checkResultColumn.filterParams.textMatcher).toBeDefined();
    expect(checkResultColumn.floatingFilterComponent).toBe(CheckResultFilterComponent);
    expect(checkResultColumn.floatingFilterComponentParams.suppressFilterButton).toBe(true);
    expect(checkResultColumn.cellRendererSelector).toBeDefined();
  });

  it('should use the correct filterParams for checkResultColumn', () => {
    const checkResultColumn = referentials.referentialsColDef.find(r => r.id === 'business_area').colDef[2];
    const filterParams = checkResultColumn.filterParams;
    const result = filterParams.textMatcher('contains', 'some text', { checkResult: { isValid: true } });
    expect(result).toBe(true);
  });

  it('should have the correct cellRendererSelector for checkResultColumn', () => {
    const checkResultColumn = referentials.referentialsColDef.find(r => r.id === 'business_area').colDef[2];
    const cellRendererSelector = checkResultColumn.cellRendererSelector;
    const params = { data: { checkResult: { isValid: true, message: 'Valid' } } };
    const result = cellRendererSelector(params);
    expect(result.component).toBe(CheckResultRenderer);
    expect(result.params.value).toEqual([true, 'Valid']);
  });
});
