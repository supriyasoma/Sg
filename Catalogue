it('should set selected file and trigger verification', () => {
    const mockFile = new File(['dummy content'], 'testFile.csv', { type: 'text/csv' });
    const mockEvent = {
      target: {
        files: [mockFile]
      }
    } as any as Event; // Casting as any to mimic the event structure

    component.setSelectedFile(mockEvent);

    expect(component.selectedFile).toEqual(new SelectedFile('testFile.csv', new CheckResult(CHECK_CODE.UNCHECKED, '', [])));
    expect(component.uploadForm.get('selectedFileLocation')?.value).toBe(mockFile);
    expect(component.showSpinner).toBe(true);
    expect(uploadService.sendDatasetFileForVerification).toHaveBeenCalled();
  });

  it('should handle file verification response', () => {
    const mockApiCheckResponse: ApiCheckResponse = {
      statusCode: 200,
      errorMessage: '',
      response: {
        validLines: 100,
        nonValidLines: 2,
        errorsDetails: ['Error in line 5', 'Error in line 20'],
        resultDetails: ['Column mismatch', 'Invalid format in row 10']
      }
    };

    const mockHttpResponse = new HttpResponse<ApiCheckResponse>({
      body: mockApiCheckResponse,
      status: 200,
      statusText: 'OK'
    });

    uploadService.sendDatasetFileForVerification.and.returnValue(of(mockHttpResponse));
    uploadService.createCheckResult.and.returnValue(new CheckResult(CHECK_CODE.KO, '', mockApiCheckResponse.response.resultDetails));

    component.sendDatasetFileForVerification();

    expect(uploadService.createCheckResult).toHaveBeenCalledWith(mockHttpResponse);
    expect(component.selectedFile.status.resultDetails).toEqual(mockApiCheckResponse.response.resultDetails);
    expect(component.fileData).toEqual(mockApiCheckResponse.response.resultDetails);
    expect(component.dataIsValid).toBe(mockApiCheckResponse.response.nonValidLines === 0);
    expect(component.showSpinner).toBe(false);
  });

  it('should handle file verification error', () => {
    const mockError = new ErrorEvent('Network error');

    uploadService.sendDatasetFileForVerification.and.returnValue(throwError(mockError));

    component.sendDatasetFileForVerification();

    expect(component.selectedFile.status).toEqual(new CheckResult(CHECK_CODE.UNCHECKED, `Error while checking DataSet! ${mockError.message}`, []));
    expect(component.showSpinner).toBe(false);
  });
