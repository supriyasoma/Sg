import { TestBed } from '@angular/core/testing';
import { CheckResultFilterComponent } from './check-result-filter.component';
import { IFloatingFilterParams, IFilterDef, ISimpleFilter } from 'ag-grid-community';

describe('CheckResultFilterComponent', () => {
  let component: CheckResultFilterComponent;
  let fixture: ComponentFixture<CheckResultFilterComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [CheckResultFilterComponent]
    });

    fixture = TestBed.createComponent(CheckResultFilterComponent);
    component = fixture.componentInstance;
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  describe('agInit', () => {
    it('should initialize params correctly', () => {
      const params: IFloatingFilterParams<ISimpleFilter> & CustomParams = {
        // mock params here
      };

      component.agInit(params);

      expect(component.params).toEqual(params);
    });
  });

  describe('onParentModelChanged', () => {
    it('should set showErrorsOnly to false when parentModel is null', () => {
      component.onParentModelChanged(null);

      expect(component.showErrorsOnly).toBeFalse();
    });

    it('should set showErrorsOnly based on parentModel.filter when parentModel is not null', () => {
      const parentModel: IFilterDef = { filter: true }; // mock filter value

      component.onParentModelChanged(parentModel);

      expect(component.showErrorsOnly).toBeTrue();
    });
  });

  describe('onInputBoxChanged', () => {
    it('should call onFloatingFilterChanged with null values if showErrorsOnly is true', () => {
      component.showErrorsOnly = true;
      const mockInstance = jasmine.createSpyObj('parentFilterInstance', ['onFloatingFilterChanged']);

      component.params.parentFilterInstance = (callback: (instance: any) => void) => callback(mockInstance);
      
      component.onInputBoxChanged();

      expect(mockInstance.onFloatingFilterChanged).toHaveBeenCalledWith(null, null);
    });

    it('should call onFloatingFilterChanged with "contains" and showErrorsOnly values if showErrorsOnly is false', () => {
      component.showErrorsOnly = false;
      const mockInstance = jasmine.createSpyObj('parentFilterInstance', ['onFloatingFilterChanged']);

      component.params.parentFilterInstance = (callback: (instance: any) => void) => callback(mockInstance);
      
      component.onInputBoxChanged();

      expect(mockInstance.onFloatingFilterChanged).toHaveBeenCalledWith('contains', false);
    });
  });
});
