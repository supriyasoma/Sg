import { ComponentFixture, TestBed } from '@angular/core/testing';
import { HeaderComponent } from './header.component';
import { AuthentificationService } from '../authentication/authentification-service';
import { DatasetInfoService } from '../services/common-storage/dataset-info-service';
import { of } from 'rxjs';

describe('HeaderComponent', () => {
  let component: HeaderComponent;
  let fixture: ComponentFixture<HeaderComponent>;
  let mockAuthService: jasmine.SpyObj<AuthentificationService>;
  let mockDatasetService: jasmine.SpyObj<DatasetInfoService>;

  beforeEach(async () => {
    mockAuthService = jasmine.createSpyObj('AuthentificationService', ['fetchUserName']);
    mockDatasetService = jasmine.createSpyObj('DatasetInfoService', ['updateUserName']);

    await TestBed.configureTestingModule({
      declarations: [ HeaderComponent ],
      providers: [
        { provide: AuthentificationService, useValue: mockAuthService },
        { provide: DatasetInfoService, useValue: mockDatasetService }
      ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(HeaderComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should fetch user name on init', () => {
    const userName = 'TestUser';
    mockAuthService.fetchUserName.and.returnValue(userName);

    component.ngOnInit();

    expect(component.userName).toBe(userName);
    expect(mockDatasetService.updateUserName).toHaveBeenCalledWith(userName);
  });

  it('should set signOut to true on onSignOut call', () => {
    component.onSignOut();
    expect(component.signOut).toBeTrue();
  });
});
