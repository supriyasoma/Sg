def largest_sum_cycle(edges):
    n = len(edges)
    max_sum = -1
    visited = [False] * n
    in_stack = [False] * n
    path = []
    
    def dfs(node):
        nonlocal max_sum, path
        visited[node] = True
        in_stack[node] = True
        path.append(node)
        
        neighbor = edges[node]
        
        if neighbor != -1:
            if not visited[neighbor]:
                dfs(neighbor)
            elif in_stack[neighbor]:
                # Found a cycle
                cycle_sum = 0
                cycle_start_index = path.index(neighbor)
                for i in range(cycle_start_index, len(path)):
                    cycle_sum += path[i]
                max_sum = max(max_sum, cycle_sum)
        
        in_stack[node] = False
        path.pop()
    
    for i in range(n):
        if not visited[i]:
            dfs(i)
    
    return max_sum

def helper_function():
    import sys
    input = sys.stdin.read
    data = input().strip().split()
    
    n = int(data[0])  # Number of cells
    edges = list(map(int, data[1:1+n]))
    
    result = largest_sum_cycle(edges)
    print(result)

if __name__ == "__main__":
    helper_function()
