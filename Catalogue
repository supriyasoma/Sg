it('should create a blob file from CSVFileDefinition', () => {
      const mockCSVFileDefinition = new CSVFileDefinition('test.csv', ['Header1,Header2', 'Data1,Data2']);
      spyOn(mockCSVFileDefinition, 'getCSVContents').and.returnValue(['Header1,Header2', 'Data1,Data2']);

      const file = service.getBlobFileFromCSVFileDefinition(mockCSVFileDefinition);

      expect(file).toBeTruthy();
      expect(file.name).toBe('test.csv');
      expect(file.type).toBe('');
      const reader = new FileReader();
      reader.onload = (e: any) => {
        expect(e.target.result).toBe('Header1,Header2\nData1,Data2');
      };
      reader.readAsText(file);
    });

    it('should generate a line string from RowNode data', () => {
      const mockRowNode = {
        data: {
          id: 1,
          name: 'Alice',
          age: 30,
          checkResult: 'Pass',
          previousValue: 'OldValue'
        }
      } as unknown as RowNode;

      const line = service.getLineFromRowNode(mockRowNode);

      expect(line).toBe('1,Alice,30,Pass');
    });

    it('should handle RowNode data with missing or excluded values correctly', () => {
      const mockRowNode = {
        data: {
          id: 2,
          name: 'Bob',
          age: null,
          checkResult: 'Fail',
          previousValue: null
        }
      } as unknown as RowNode;

      const line = service.getLineFromRowNode(mockRowNode);

      expect(line).toBe('2,Bob,,Fail');
    });
