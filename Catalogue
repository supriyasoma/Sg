it('should have the correct column definitions', () => {
    const colDef = referentials.referentialsColDef[0].colDef;
    expect(colDef.length).toBe(3);

    // Test the checkboxBtn column
    const checkboxBtn = colDef[0];
    expect(checkboxBtn.field).toBe('checkboxBtn');
    expect(checkboxBtn.checkboxSelection).toBeTrue();
    expect(checkboxBtn.headerCheckboxSelection).toBeTrue();
    expect(checkboxBtn.pinned).toBe('left');

    // Test the sourceApplicationCode column
    const sourceAppCode = colDef[1];
    expect(sourceAppCode.field).toBe('sourceApplicationCode');
    expect(sourceAppCode.headerName).toBe('SourceApplicationCode');
    expect(sourceAppCode.floatingFilter).toBeTrue();
    expect(sourceAppCode.filter).toBe('agTextColumnFilter');
    expect(sourceAppCode.editable).toBeFalse();
    expect(sourceAppCode.resizable).toBeTrue();
    expect(sourceAppCode.sortable).toBeTrue();
    expect(sourceAppCode.cellClass).toBe('cellClass');

    // Test the checkResult column
    const checkResult = colDef[2];
    expect(checkResult.field).toBe('checkResult');
    expect(checkResult.headerName).toBe('CheckResult');
    expect(checkResult.floatingFilter).toBeTrue();
    expect(checkResult.filter).toBe('agTextColumnFilter');
    expect(checkResult.filterParams.textMatcher).toBeDefined();
    expect(checkResult.floatingFilterComponent).toBe(CheckResultFilterComponent);
    expect(checkResult.floatingFilterComponentParams.suppressFilterButton).toBeTrue();
    expect(checkResult.cellRendererSelector).toBeDefined();
  });

  it('should use textMatcher correctly in filterParams for checkResult', () => {
    const checkResultCol = referentials.referentialsColDef[0].colDef[2];
    const textMatcher = checkResultCol.filterParams.textMatcher;

    let result = textMatcher('contains', 'valid', { checkResult: { isValid: true } });
    expect(result).toBeTrue();

    result = textMatcher('contains', 'invalid', { checkResult: { isValid: false } });
    expect(result).toBeFalse();
  });
