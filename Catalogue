    it('should call the correct API endpoint with the correct headers and parameters', () => {
      const mockResponse = 'some dataset content';
      const referentialId = '12345';

      service.getDatasetContent(referentialId).subscribe(response => {
        expect(response.body).toEqual(mockResponse);
      });

      const req = httpMock.expectOne(req => req.url === `${environment.serviceBaseUrl}${service.versionFeatureUri}`);
      expect(req.request.method).toBe('GET');
      expect(req.request.headers.get('Accept')).toBe('application/json; charset=utf-8');
      expect(req.request.params.get('referentialId')).toBe(referentialId);

      req.flush(mockResponse);
    });
  });

  describe('setDatasetContent', () => {
    it('should call the correct API endpoint with the correct headers and body', () => {
      const mockResponse = 'success';
      const referentialId = '12345';
      const datasetContent = { data: 'example content' };

      service.setDatasetContent(referentialId, datasetContent).subscribe(response => {
        expect(response.body).toEqual(mockResponse);
      });

      const req = httpMock.expectOne(req => req.url === `${environment.serviceBaseUrl}${service.versionFeatureUri}/${referentialId}`);
      expect(req.request.method).toBe('POST');
      expect(req.request.headers.get('Accept')).toBe('application/json; charset=utf-8');
      expect(req.request.headers.get('Content-Type')).toBe('application/json');
      expect(req.request.body).toBe(JSON.stringify(datasetContent));

      req.flush(mockResponse);
    });
