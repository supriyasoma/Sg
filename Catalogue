    it('should map HTTP response to dataset correctly', () => {
      const mockResponse = new HttpResponse({
        body: {
          response: [
            {
              fileName: 'test.csv',
              version: '1.0',
              user: 'John Doe',
              date: '2024-01-01T12:00:00',
              data: 'some data',
              referentialId: 'ref123'
            },
            // Add more mock data if needed
          ]
        },
        status: 200,
        statusText: 'OK'
      });

      const result = service.mapHttpResponseToDataSet(mockResponse);

      expect(result).toEqual([{
        fileName: 'test.csv',
        version: '1.0',
        user: 'John Doe',
        date: '2024-01-01T12:00:00',
        data: 'some data',
        referentialId: 'ref123'
      }]);
    });

    it('should return an empty array if the response is not OK', () => {
      const mockResponse = new HttpResponse({
        body: { response: [] },
        status: 500,
        statusText: 'Internal Server Error'
      });

      const result = service.mapHttpResponseToDataSet(mockResponse);

      expect(result).toEqual([]);
    });
  });

  describe('mapHttpResponseToAuditDataSet', () => {
    it('should map HTTP response to audit dataset correctly', () => {
      const mockResponse = new HttpResponse({
        body: {
          response: [
            {
              version: '1.0',
              author: 'John Doe',
              date: '2024-01-01T12:00:00',
              status: 'Completed',
              dateInLucid: '2024-01-01T13:00:00'
            },
            // Add more mock data if needed
          ]
        },
        status: 200,
        statusText: 'OK'
      });

      const result = service.mapHttpResponseToAuditDataSet(mockResponse);

      expect(result).toEqual([{
        version: '1.0',
        author: 'John Doe',
        date: '2024-01-01 12:00:00',
        status: 'Completed',
        dateInLucid: '2024-01-01 13:00:00'
      }]);
    });

    it('should return an empty array if the response is not OK', () => {
      const mockResponse = new HttpResponse({
        body: { response: [] },
        status: 500,
        statusText: 'Internal Server Error'
      });

      const result = service.mapHttpResponseToAuditDataSet(mockResponse);

      expect(result).toEqual([]);
    });
