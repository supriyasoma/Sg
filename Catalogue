def largest_sum_cycle(edges):
    n = len(edges)
    max_sum = -1
    visited = [False] * n
    in_stack = [False] * n
    stack = [0] * n
    
    def dfs(node):
        nonlocal edges, visited, in_stack, stack
        visited[node] = True
        in_stack[node] = True
        stack[node] = node
        
        cycle_sum = 0
        neighbor = edges[node]
        
        if neighbor != -1:
            if not visited[neighbor]:
                cycle_sum = dfs(neighbor)
            elif in_stack[neighbor]:
                # Found a cycle
                start = neighbor
                sum_ = 0
                while True:
                    sum_ += stack[start]
                    start = edges[start]
                    if start == neighbor:
                        break
                cycle_sum = sum_
        
        in_stack[node] = False
        return cycle_sum
    
    for i in range(n):
        if not visited[i]:
            cycle_sum = dfs(i)
            if cycle_sum > 0:
                max_sum = max(max_sum, cycle_sum)
    
    return max_sum


def helper_function():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    n = int(data[0])  # Number of cells
    edges = list(map(int, data[1:n+1]))
    
    result = largest_sum_cycle(edges)
    print(result)


if __name__ == "__main__":
    helper_function()
