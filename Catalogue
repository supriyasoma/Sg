    const mockResponseWithErrors = {
      body: {
        response: {
          nonvalidlines: ['line1', 'line2'],
          resultDetails: ['Detail 1', 'Detail 2'],
          validlines: false,
          errorsDetails: ['Error in line1', 'Error in line2']
        }
      }
    };

    const result = service.createCheckResultFromResponse(mockResponseWithErrors);
    expect(result.code).toBe('ERROR_CODE.AD');
    expect(result.message).toContain('Errors in lines');
  });

  it('should handle a valid dataset response', () => {
    const mockResponseValidData = {
      body: {
        response: {
          nonvalidlines: [],
          resultDetails: ['Valid detail 1', 'Valid detail 2'],
          validlines: true,
          errorsDetails: []
        }
      }
    };

    const result = service.createCheckResultFromResponse(mockResponseValidData);
    expect(result.code).toBe('SUCCESS_CODE.OK');
    expect(result.message).toContain('Dataset file is valid');
  });

  it('should handle an empty dataset response', () => {
    const mockResponseEmptyData = {
      body: {
        response: {
          nonvalidlines: [],
          resultDetails: [],
          validlines: false,
          errorsDetails: []
        }
      }
    };
