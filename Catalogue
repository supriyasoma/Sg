it('should return CHECK_CODE.KO when there are non-valid lines', () => {
      const mockResponse = {
        body: {
          response: {
            nonValidLines: [1, 2],
            resultDetails: ['Detail1', 'Detail2'],
            validLines: [3, 4],
            errorsDetails: ['Error1', 'Error2']
          }
        }
      } as HttpResponse<ApiCheckResponse>;

      const result = createCheckResultFromResponse(mockResponse);
      expect(result.code).toBe(CHECK_CODE.KO);
      expect(result.message).toBe('Errors in lines: Error1, Error2');
      expect(result.details).toEqual(['Detail1', 'Detail2']);
    });

    it('should return CHECK_CODE.OK when dataset is valid', () => {
      const mockResponse = {
        body: {
          response: {
            nonValidLines: [],
            resultDetails: ['Valid Detail'],
            validLines: [1, 2]
          }
        }
      } as HttpResponse<ApiCheckResponse>;

      const result = createCheckResultFromResponse(mockResponse);
      expect(result.code).toBe(CHECK_CODE.OK);
      expect(result.message).toBe('Dataset file is valid');
      expect(result.details).toEqual(['Valid Detail']);
    });

    it('should return CHECK_CODE.NO when dataset is empty', () => {
      const mockResponse = {
        body: {
          response: {
            nonValidLines: [],
            resultDetails: [],
            validLines: []
          }
        }
      } as HttpResponse<ApiCheckResponse>;

      const result = createCheckResultFromResponse(mockResponse);
      expect(result.code).toBe(CHECK_CODE.NO);
      expect(result.message).toBe('Dataset is empty');
      expect(result.details).toEqual([]);
    });
