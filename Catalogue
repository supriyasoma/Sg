it('should generate a line string from RowNode data, excluding certain fields', () => {
      const mockRowNode = {
        data: {
          id: 1,
          name: 'Alice',
          age: 30,
          checkResult: 'Pass',
          previousValue: 'OldValue'
        }
      } as unknown as RowNode;

      const line = service.getLineFromRowNode(mockRowNode);

      expect(line).toBe('1,Alice,30');
    });

    it('should handle RowNode data with missing or excluded values correctly', () => {
      const mockRowNode = {
        data: {
          id: 2,
          name: 'Bob',
          age: null,
          checkResult: 'Fail',
          previousValue: null
        }
      } as unknown as RowNode;

      const line = service.getLineFromRowNode(mockRowNode);

      expect(line).toBe('2,Bob,');
    });

    it('should gather all row data from GridApi as strings', () => {
      const mockGridApi = jasmine.createSpyObj('GridApi', ['forEachNode']);
      const mockData = [
        { data: { id: 1, name: 'Alice', age: 30 } },
        { data: { id: 2, name: 'Bob', age: 25 } }
      ];

      mockGridApi.forEachNode.and.callFake((callback: (node: any) => void) => {
        mockData.forEach(callback);
      });

      const rowData = service.getRowDataFromGrid(mockGridApi as unknown as GridApi);

      expect(rowData.length).toBe(2);
      expect(rowData).toEqual([
        mockData[0].data,
        mockData[1].data,
      ]);
    });
