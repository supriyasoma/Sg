import { TestBed } from '@angular/core/testing';
import { DatasetInfoService } from './dataset-info.service'; // Update with the correct path

describe('DatasetInfoService', () => {
  let service: DatasetInfoService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(DatasetInfoService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should set and get the username', (done: DoneFn) => {
    const testUsername = 'testUser';
    service.setUsername(testUsername);
    
    service.currentUsername.subscribe(username => {
      expect(username).toBe(testUsername);
      done();
    });
  });

  it('should set and get the referential ID', (done: DoneFn) => {
    const testReferentialId = '12345';
    service.updateReferentialId(testReferentialId);
    
    service.currentReferentialId.subscribe(referentialId => {
      expect(referentialId).toBe(testReferentialId);
      done();
    });
  });

  it('should set and get the validate date', (done: DoneFn) => {
    const testDate = '2024-07-29';
    service.updateValidateDate(testDate);
    
    service.currentValidateDate.subscribe(validateDate => {
      expect(validateDate).toBe(testDate);
      done();
    });
  });

  it('should set and get the dataset versions', (done: DoneFn) => {
    const testVersions = ['v1', 'v2', 'v3'];
    service.updateDatasetVersions(testVersions);
    
    service.currentDatasetVersions.subscribe(versions => {
      expect(versions).toEqual(testVersions);
      done();
    });
  });

  it('should set and get the selected version', (done: DoneFn) => {
    const testSelectedVersion = 'v2';
    service.updateSelectedVersion(testSelectedVersion);
    
    service.currentSelectedVersion.subscribe(selectedVersion => {
      expect(selectedVersion).toBe(testSelectedVersion);
      done();
    });
  });

  it('should set and get the dataset content', (done: DoneFn) => {
    const testContent = { data: 'some content' };
    service.updateDatasetContent(testContent);
    
    service.currentDatasetContent.subscribe(content => {
      expect(content).toEqual(testContent);
      done();
    });
  });
});
